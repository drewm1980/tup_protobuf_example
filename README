This repo just contains sample code to demonstrate
ways of dealing with tup's restrictions on where
build targets can reside.  Google protocol buffers
are used as a canonical example.

Note:
The "cpp" subdirectory should build just fine.
The "haskell" subdirectory has a broken target as an illustration of the problem.
The "haskell_hack1" subdirectory requires you to run two code generation shell
scripts manually before the tup targets will work (read the Tupfiles for details)

*IMPORTANT UPDATE*: In recent versions of tup, the restriction on where files can placed
has been lifted, removing ~most of the hassle with code generated targets. This is illustrated in the "haskell_hack2" subdirectory.

Dependencies:
linux
bash
tup
libprotobuf-dev package (or whatever it is on your distro)
hprotoc (i.e. installed via cabal, haskell's language-specific source based package manager)
